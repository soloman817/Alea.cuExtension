//
// Copyright (c) 2011 QuantAlea GmbH.  All rights reserved.
//  

#include <cassert>
#include <iomanip>
#include <iostream>
#include <string>
#include <sstream>

#include "xorshift7_gold.hpp"
#include "matrix256.hpp"

#define INDENT 4

namespace alea { namespace cuda { namespace math { namespace random {

	using namespace alea::cuda::math::f2;

	// This function is dumping xorshift7 RNG state matrix, raised to
	// specific range of powers of 2, to standard output; these matrices are
	// useful for xorshift7 RNG jump-ahead calculations.  Given matrices are
	// dumped as a large array of unsigned numbers, in row-major order.  The
	// program is expecting 2 arguments from the command line: these are
	// boundaries of interval of powers of 2 that xorshift7 RNG state matrix
	// will be raised to, and then dumped to standard output.  Lower
	// boundary of this interval must be non-negative, and upper boundary
	// must be greater of equal to the lower bound.
	void xorshift7JumpHeaderGenerateC(int lo, int hi)
	{
		std::string indent;
		for (int i = 0; i < INDENT; ++i)
			indent += ' ';

		assert(lo >= 0);
		assert(hi >= lo);

		// Print comment.
		std::cout << "// Generated by xorshift7_jump_ahead program." << std::endl;

		// Print jump-ahead data; print numbers in hexadecimal format.
		std::cout << "const unsigned xorshift7JumpAheadMatrices[" << (hi - lo + 1) * 256 * 8 << "] = {" << std::endl;
		Matrix256 m = Xorshift7Gold::getMatrix().powPow2(lo);
		for (int i = lo; i <= hi; ++i)
		{
			// Print current matrix.
			for (int j = 0; j < 256; ++j)
			{
				// Print 8 unsigned 32-bit numbers (which means, full
				// 256x256 bit-matrix row) per row of output.
				std::cout << indent;
				for (int k = 0; k < 8; ++k)
					std::cout << "0x" << std::hex << std::setw(8) << std::setfill('0') << m.bits_[j][k] << ", ";
				std::cout << std::endl;
			}

			// Raise matrix to next power of 2 number in sequence.
			m = m * m;
		}
		std::cout << "};" << std::endl;
	}

	void xorshift7JumpHeaderGenerateFSharp(int lo, int hi)
	{
		std::string indent;
		for (int i = 0; i < INDENT; ++i)
			indent += ' ';

		assert(lo >= 0);
		assert(hi >= lo);

		// Print comment.
		std::cout << "// Generated by xorshift7_jump_ahead program." << std::endl;

		std::cout << "module XorShift7JumpAheadMatrices" << std::endl;

		// Print jump-ahead data; print numbers in hexadecimal format.
		std::cout << indent << "let matrices = [|" << std::endl;
		Matrix256 m = Xorshift7Gold::getMatrix().powPow2(lo);
		for (int i = lo; i <= hi; ++i)
		{
			// Print current matrix.
			for (int j = 0; j < 256; ++j)
			{
				// Print 8 unsigned 32-bit numbers (which means, full
				// 256x256 bit-matrix row) per row of output.
				std::cout << indent << indent;
				for (int k = 0; k < 8; ++k)
					std::cout << "0x" << std::hex << std::setw(8) << std::setfill('0') << m.bits_[j][k] << "u; ";
				std::cout << std::endl;
			}

			// Raise matrix to next power of 2 number in sequence.
			m = m * m;
		}
		std::cout << indent << indent << "|]" << std::endl;
	}

}}}}
