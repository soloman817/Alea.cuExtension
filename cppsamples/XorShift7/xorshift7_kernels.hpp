//
// Copyright (c) 2011 QuantAlea GmbH.  All rights reserved.
// 

#ifndef RANDOM_XORSHIFT7_KERNEL_HPP
#define RANDOM_XORSHIFT7_KERNEL_HPP

#include <cuda_runtime.h>

namespace alea { namespace cuda { namespace math { namespace random 
{
    /*!
       Build xorshift7 RNG start state from given seed.  This functions is
       defined mostly for testing purposes, in order to be able to use same
       start state as CUDA implementation of the xorshift7 RNG uses, when
       compared with other implementations.  At the moment, the seed
       provided is used to seed C standard library RNG, which is further
       used to generate 8 random numbers that are used as xorhsift7 RNG
       start state.
       @param the seed used to generate xorhsift7 RNG start state
       @param state the array to store generated xorhsift7 RNG start state
       into
     */
    void rngGetStartState(unsigned seed, unsigned* state);

    /*!
       Execute kernel for generating uniformly distributed random numbers
       using xorshift7 RNG.  The kernel is ready for simultaneous execution
       on multiple CUDA devices, under assumption that the grid and blocks
       size are the same on each of these devices.
       @param numDevices the number of devices that the kernel will be
       executed on
       @param deviceRank the index of device within all devices that the
       kernel will be executed on
       @param gridSize dimensions of the grid of thread blocks
       @param blockSize dimensions of the block of thread
       @param seed the seed for the xorshift7 RNG
       @param numSteps number of random values to be generated by each
       thread
       @param results pointer to device global memory segment, allocated for
       threads to store corresponding random numbers generated
     */
    cudaError_t rngGenerateUniformKernelExecute(
        int       numDevices
      , int       deviceRank
      , dim3      gridSize
      , dim3      blockSize
      , unsigned  seed
      , int       numSteps
      , float   * results
      );

    cudaError_t rngGenerateUniformKernelExecuteUnsigned(
        int       numDevices
      , int       deviceRank
      , dim3      gridSize
      , dim3      blockSize
      , unsigned  seed
      , int       numSteps
      , unsigned* results
      );

    cudaError_t rngGenerateUniformKernelExecuteUnsignedWithTimeLogging(
        int       numDevices
      , int       deviceRank
      , dim3      gridSize
      , dim3      blockSize
      , unsigned  seed
      , int       numSteps
      , unsigned* results
	  , bool	  syncThread
      );

	/*!
       Execute kernel for generating normally distributed random numbers
       using xorshift7 RNG.  The kernel is ready for simultaneous execution
       on multiple CUDA devices, under assumption that the grid and blocks
       size are the same on each of these devices.
       @param numDevices the number of devices that the kernel will be
       executed on
       @param deviceRank the index of device within all devices that the
       kernel will be executed on
       @param gridSize dimensions of the grid of thread blocks
       @param blockSize dimensions of the block of thread
       @param seed the seed for the xorshift7 RNG
       @param numSteps number of random values to be generated by each
       thread
       @param results pointer to device global memory segment, allocated for
       threads to store corresponding random numbers generated
     */
    cudaError_t rngGenerateNormalKernelExecute(
        int       numDevices
      , int       deviceRank
      , dim3      gridSize
      , dim3      blockSize
      , unsigned  seed
      , int       numSteps
      , float   * results
      );

}}}}

#endif
